-*- mode: org; coding: utf-8; -*-
* Specification [1/7]
   :PROPERTIES:
   :CUSTOM_ID: specification
   :END:

   You must fulfill the following requirements:

- [X] *New Post*: Users who are signed in should be able to write a new
  text-based post by filling in text into a text area and then
  clicking a button to submit the post.
  - [X] The screenshot at the top of this specification shows the “New
    Post” box at the top of the “All Posts” page. You may choose to do
    this as well, or you may make the “New Post” feature a separate
    page.

- [-] *All Posts*: The “All Posts” link in the navigation bar should
  take the user to a page where they can see all posts from all users,
  with the most recent posts first.
  - [X] Each post should include the username of the poster, the post
    content itself, the date and time at which the post was made, and
    the number of “likes” the post has (this will be 0 for all posts
    until you implement the ability to “like” a post later).
  - [ ] Posts should be in chronological order
  # TODO - [ ] Try implementing adding comments. Look [[https://docs.djangoproject.com/en/3.0/topics/http/sessions/#module-django.contrib.sessions][here]] for inspiration:
  # seems this would require a recursive CTE as said in
  # https://www.youtube.com/watch?v=M4O0YQGTxjM

- [ ] *Profile Page*: Clicking on a username should load that user's
  profile page. This page should:

  - [ ] Display the number of followers the user has, as well as the
    number of people that the user follows.
  - [ ] Display all of the posts for that user, in reverse chronological
    order.
  - [ ] For any other user who is signed in, this page should also
    display a “Follow” or “Unfollow” button that will let the current
    user toggle whether or not they are following this user's
    posts. Note that this only applies to any “other” user: a user
    should not be able to follow themselves.

- [ ] *Following*: The “Following” link in the navigation bar should
  take the user to a page where they see all posts made by users that
  the current user follows.
  - [ ] This page should behave just as the “All Posts” page does, just
    with a more limited set of posts.
  - [ ] This page should only be available to users who are signed in.

- [ ] *Pagination*: On any page that displays posts, posts should only
  be displayed 10 on a page. If there are more than ten posts, a
  “Next” button should appear to take the user to the next page of
  posts (which should be older than the current page of posts). If not
  on the first page, a “Previous” button should appear to take the
  user to the previous page of posts as well.
  - [ ] See the *Hints* section for some suggestions on how to implement
    this.

- [ ] *Edit Post*: Users should be able to click an “Edit” button or
  link on any of their own posts to edit that post.
  - [ ] When a user clicks “Edit” for one of their own posts, the
    content of their post should be replaced with a =textarea= where
    the user can edit the content of their post.
  - [ ] The user should then be able to “Save” the edited post. Using
    JavaScript, you should be able to achieve this without requiring a
    reload of the entire page.
  - [ ] For security, ensure that your application is designed such that
    it is not possible for a user, via any route, to edit another
    user's posts.

- [ ] ~“Like” and “Unlike”~: Users should be able to click a button or
  link on any post to toggle whether or not they “like” that post.
  - [ ] Using JavaScript, you should asynchronously let the server know
    to update the like count (as via a call to =fetch=) and then
    update the post's like count displayed on the page, without
    requiring a reload of the entire page.

** How to Submit
   :PROPERTIES:
   :CUSTOM_ID: how-to-submit
   :END:

When you submit your project, the contents of your
=web50/projects/2020/x/network= branch should match the file structure
of the unzipped distribution code as originally received. That is to
say, your files should not be nested inside of any other directories of
your own creation. Your branch should also not contain any code from any
other projects, only this one. Failure to adhere to this file structure
will likely result in your submission being rejected.

By way of example, for this project that means that if the grading staff
visits
=https://github.com/me50/USERNAME/tree/web50/projects/2020/x/network=
(where =USERNAME= is your own GitHub username as provided in the form,
below) we should see the two subdirectories (=network=, =project4=) and
the =manage.py= file. If that's not how your code is organized when you
check, reorganize your repository needed to match this paradigm.


   =https://github.com/me50/USERNAME.git=, where =USERNAME= is your
   GitHub username, on a branch called =web50/projects/2020/x/network=.

5. Submit [[https://forms.cs50.io/365e9201-564b-4fd0-a7cc-2350a5c6df3d][this form]].
